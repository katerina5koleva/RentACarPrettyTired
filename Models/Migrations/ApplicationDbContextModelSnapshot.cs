// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentACar.Data;

#nullable disable

namespace RentACar.Data.Migrations
{
    /// <summary>
    /// This class represents a snapshot of the application's database model.
    /// It is auto-generated by Entity Framework Core during migrations and is used to compare the current model
    /// with the database schema to determine necessary changes.
    /// </summary>
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        /// <summary>
        /// Configures the database model using the provided <see cref="ModelBuilder"/>.
        /// This method defines the structure of the database tables, relationships, and seed data.
        /// </summary>
        /// <param name="modelBuilder">The <see cref="ModelBuilder"/> used to configure the database schema.</param>
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            // General database annotations
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3") // EF Core version
                .HasAnnotation("Relational:MaxIdentifierLength", 128); // Max identifier length for SQL Server

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            // IdentityRole entity configuration
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
            {
                b.Property<string>("Id").HasColumnType("nvarchar(450)");
                b.Property<string>("ConcurrencyStamp").IsConcurrencyToken().HasColumnType("nvarchar(max)");
                b.Property<string>("Name").HasMaxLength(256).HasColumnType("nvarchar(256)");
                b.Property<string>("NormalizedName").HasMaxLength(256).HasColumnType("nvarchar(256)");

                b.HasKey("Id");
                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                b.ToTable("AspNetRoles");

                // Seed data for roles
                b.HasData(
                    new { Id = "a23a7ee8-beb5-4238-ad8a-88d54b3c3d29", ConcurrencyStamp = "12345678-1234-1234-1234-123456789012", Name = "Administrator", NormalizedName = "ADMINISTRATOR" },
                    new { Id = "a23a7ee8-beb5-4238-ad8a-88d54b3c3d28", ConcurrencyStamp = "12345678-1234-1234-1234-123456789013", Name = "BasicUser", NormalizedName = "BASICUSER" }
                );
            });

            // Other Identity-related entities (e.g., IdentityRoleClaim, IdentityUserClaim, etc.)
            // These entities define the structure for claims, logins, roles, and tokens.

            // RentACar.Data.Models.Auto entity configuration
            modelBuilder.Entity("RentACar.Data.Models.Auto", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");
                b.Property<string>("Brand").IsRequired().HasColumnType("nvarchar(max)");
                b.Property<string>("Description").HasColumnType("nvarchar(max)");
                b.Property<string>("Image").IsRequired().HasColumnType("nvarchar(max)");
                b.Property<string>("Model").IsRequired().HasColumnType("nvarchar(max)");
                b.Property<int>("PassengerSeats").HasColumnType("int");
                b.Property<int>("PricePerDay").HasColumnType("int");
                b.Property<int>("Year").HasColumnType("int");

                b.HasKey("Id");
                b.ToTable("Autos");
            });

            // RentACar.Data.Models.BookingPeriod entity configuration
            modelBuilder.Entity("RentACar.Data.Models.BookingPeriod", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");
                b.Property<int>("AutoId").HasColumnType("int");
                b.Property<DateTime>("EndDate").HasColumnType("datetime2");
                b.Property<DateTime>("StartDate").HasColumnType("datetime2");

                b.HasKey("Id");
                b.HasIndex("AutoId");
                b.ToTable("BookingPeriods");

                // Relationship with Auto
                b.HasOne("RentACar.Data.Models.Auto", "Auto")
                    .WithMany("Bookings")
                    .HasForeignKey("AutoId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            // RentACar.Data.Models.Request entity configuration
            modelBuilder.Entity("RentACar.Data.Models.Request", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");
                b.Property<int>("AutoId").HasColumnType("int");
                b.Property<DateTime>("DateOfRequest").HasColumnType("datetime2");
                b.Property<bool>("IsApproved").HasColumnType("bit");
                b.Property<bool>("IsDeclined").HasColumnType("bit");
                b.Property<DateTime>("PickUpDate").HasColumnType("datetime2");
                b.Property<DateTime>("ReturnDate").HasColumnType("datetime2");
                b.Property<string>("UserId").IsRequired().HasColumnType("nvarchar(450)");

                b.HasKey("Id");
                b.HasIndex("AutoId");
                b.HasIndex("UserId");
                b.ToTable("Requests");

                // Relationships with Auto and User
                b.HasOne("RentACar.Data.Models.Auto", "Auto")
                    .WithMany("Requests")
                    .HasForeignKey("AutoId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("RentACar.Data.Models.User", "User")
                    .WithMany("Requests")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            // RentACar.Data.Models.User entity configuration
            modelBuilder.Entity("RentACar.Data.Models.User", b =>
            {
                b.Property<string>("Id").HasColumnType("nvarchar(450)");
                b.Property<int>("AccessFailedCount").HasColumnType("int");
                b.Property<string>("ConcurrencyStamp").IsConcurrencyToken().HasColumnType("nvarchar(max)");
                b.Property<string>("Email").IsRequired().HasMaxLength(256).HasColumnType("nvarchar(256)");
                b.Property<bool>("EmailConfirmed").HasColumnType("bit");
                b.Property<string>("Firstname").IsRequired().HasColumnType("nvarchar(max)");
                b.Property<bool>("LockoutEnabled").HasColumnType("bit");
                b.Property<DateTimeOffset?>("LockoutEnd").HasColumnType("datetimeoffset");
                b.Property<string>("NIN").IsRequired().HasColumnType("nvarchar(450)");
                b.Property<string>("NormalizedEmail").HasMaxLength(256).HasColumnType("nvarchar(256)");
                b.Property<string>("NormalizedUserName").HasMaxLength(256).HasColumnType("nvarchar(256)");
                b.Property<string>("PasswordHash").HasColumnType("nvarchar(max)");
                b.Property<string>("PhoneNumber").IsRequired().HasColumnType("nvarchar(max)");
                b.Property<bool>("PhoneNumberConfirmed").HasColumnType("bit");
                b.Property<string>("SecurityStamp").HasColumnType("nvarchar(max)");
                b.Property<string>("Surname").IsRequired().HasColumnType("nvarchar(max)");
                b.Property<bool>("TwoFactorEnabled").HasColumnType("bit");
                b.Property<string>("UserName").IsRequired().HasMaxLength(256).HasColumnType("nvarchar(256)");

                b.HasKey("Id");
                b.HasIndex("Email").IsUnique();
                b.HasIndex("NIN").IsUnique();
                b.HasIndex("NormalizedEmail").HasDatabaseName("EmailIndex");
                b.HasIndex("NormalizedUserName").IsUnique().HasDatabaseName("UserNameIndex").HasFilter("[NormalizedUserName] IS NOT NULL");
                b.HasIndex("UserName").IsUnique();
                b.ToTable("AspNetUsers");

                // Seed data for the admin user
                b.HasData(
                    new
                    {
                        Id = "a820ccf9-54ac-4047-b4b5-48dab0dc962b",
                        AccessFailedCount = 0,
                        ConcurrencyStamp = "12345678-1234-1234-1234-123456789012",
                        Email = "admin@admin.com",
                        EmailConfirmed = true,
                        Firstname = "Admin",
                        LockoutEnabled = true,
                        NIN = "ADMIN123456",
                        NormalizedEmail = "ADMIN@ADMIN.COM",
                        NormalizedUserName = "ADMIN@ADMIN.COM",
                        PasswordHash = "AQAAAAIAAYagAAAAEJmsXmTvQxGXj8Yzq1uXW5JZ6+7V9kKj1pZ2h3Y4vR4X5nB6r7s8W3Y2w1oA1xg==",
                        PhoneNumber = "+1234567890",
                        PhoneNumberConfirmed = true,
                        SecurityStamp = "",
                        Surname = "User",
                        TwoFactorEnabled = false,
                        UserName = "admin@admin.com"
                    }
                );
            });

#pragma warning restore 612, 618
        }
    }
}
